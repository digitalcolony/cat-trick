---
const { data } = Astro.props;

const catCount = data.length;

const totalDays = Math.floor(
	(Number(new Date()) - Number(new Date(data[0].date))) / (1000 * 60 * 60 * 24)
);

const groupedCats = data.reduce((acc, curr) => {
	if (!acc[curr.date]) {
		acc[curr.date] = [];
	}
	acc[curr.date].push(curr.cat);
	return acc;
}, {});

// sort groupedCats by date descending
const sortedGroupedCats = Object.entries(groupedCats).sort((a, b) => {
	const dateA = new Date(a[0]);
	const dateB = new Date(b[0]);
	return dateB.getTime() - dateA.getTime();
});

const catsByDate = sortedGroupedCats.map(([date, cats]) => {
	return {
		date,
		cats,
	};
});

const catCountByCount = catsByDate.reduce((acc, curr) => {
	const count = (curr.cats as any[]).length;
	if (!acc[count]) {
		acc[count] = 0;
	}
	acc[count]++;
	return acc;
}, {});

// cat count by month and year
const catCountByMonthAndYear = data.reduce((acc, curr) => {
	const month = new Date(curr.date).toLocaleString("default", { month: "long" });
	const year = new Date(curr.date).getFullYear();
	const key = `${year} ${month}`;
	if (!acc[key]) {
		acc[key] = 0;
	}
	acc[key]++;
	return acc;
}, {});

interface CountObject {
	[key: string]: number;
}
const catCountByCountTS: CountObject = catCountByCount;
const totalCount = Object.values(catCountByCountTS).reduce((sum, count) => sum + count, 0);
const totalCatTricks = Object.entries(catCountByCountTS)
	.filter(([catCount, count]) => Number(catCount) >= 3)
	.reduce((sum, [catCount, count]) => sum + count, 0);
const daysWithNoCats = totalDays - totalCount;
---

<div class="leaderboard">
	<ul style="list-style: none; text-align: center; ">
		<ul style="list-style: none; text-align: center;">
			<li style="text-align: left;"><strong>Total Pets:</strong> {catCount}</li>
			<li style="text-align: left;"><strong>Total Days:</strong> {totalDays}</li>
			<li>&nbsp;</li>
			<li style="text-align: left;">
				0 cat(s)&nbsp;&nbsp; {((Number(daysWithNoCats) / Number(totalDays)) * 100).toFixed(1)}% ({
					Number(daysWithNoCats)
				})
			</li>
			{
				Object.entries(catCountByCount).map(([catCount, count]) => (
					<li style="text-align: left;">
						{catCount} cat(s)&nbsp;&nbsp;
						{((Number(count) / Number(totalDays)) * 100).toFixed(1)}% ({Number(count)})
					</li>
				))
			}
			<li>&nbsp;</li>
			<li style="text-align: left;">
				<strong>Cat Tricks</strong>
				{((Number(totalCatTricks) / Number(totalDays)) * 100).toFixed(1)}% ({
					Number(totalCatTricks)
				})
			</li>
			<li>&nbsp;</li>
			{
				Object.entries(catCountByMonthAndYear).map(([monthAndYear, count]) => (
					<li style="text-align: left;">
						({Number(count) < 10 ? `0${Number(count)}` : `${Number(count)}`})&nbsp;{monthAndYear}
					</li>
				))
			}
		</ul>
	</ul>
</div>
